import org.apache.tools.ant.filters.*

buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
    }
}

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "io.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'org.mini2Dx'
		username = ossrhUser
		password = ossrhPassword
	}
}

apply plugin: "java"
apply plugin: "signing"
apply plugin: "maven"
	
group = 'org.mini2Dx'
version = "$libgdxVersion"
description = "LibGDX collection classes extracted into a standalone library"
	
sourceCompatibility = 1.7
targetCompatibility = 1.7
	
dependencies {}

task cleanSrcDir(type: Delete) {
	delete 'src/main/java/com'
}
clean.dependsOn cleanSrcDir

File libGdxDirectory = file("libgdx");

if(libGdxDirectory.exists()) {
	task checkoutLibGdxMaster(type: Exec) {
		workingDir './libgdx'
		commandLine 'git', 'checkout', 'master'
	}
	
	task pullLatestLibGdxMaster(type: Exec, dependsOn: checkoutLibGdxMaster) {
		workingDir './libgdx'
		commandLine 'git', 'pull', 'origin', 'master'
	}

	task fetchLatestLibGdxTags(type: Exec, dependsOn: pullLatestLibGdxMaster) {
		workingDir './libgdx'
		commandLine 'git', 'fetch', '--tags', 'origin', 'master'
	}
} else {
	task fetchLatestLibGdxTags(type: Exec) {
		commandLine 'git', 'clone', '--progress', 'https://github.com/libgdx/libgdx.git', 'libgdx'
	}
}

task checkoutLibGdxTag(type: Exec, dependsOn: fetchLatestLibGdxTags) {
	workingDir './libgdx'
	commandLine 'git', 'checkout', "$libgdxVersion"
}

task copyLicenseFiles(type: Copy, dependsOn: checkoutLibGdxTag) {
	from('libgdx') {
		include 'LICENSE'
	}
	into './'
}

task copyRequiredMathClasses(type: Copy, dependsOn: copyLicenseFiles) {
	from('libgdx/gdx/src/com/badlogic/gdx/math') {
		include 'MathUtils.java'
		include 'RandomXS128.java'
		filter { String line ->
        	line.contains('com.badlogic.gdx.math') ? line.replace('com.badlogic.gdx.math', 'org.mini2Dx.gdx.utils.compat') : (
        		line.contains('com.badlogic.gdx.utils.reflect') ? line.replace('com.badlogic.gdx.utils.reflect', 'org.mini2Dx.gdx.utils.compat') : line
        	)
    	}
	}
	into 'src/main/java/org/mini2Dx/gdx/utils/compat'
}

task copyRequiredReflectClasses(type: Copy, dependsOn: copyRequiredMathClasses) {
	from('libgdx/gdx/src/com/badlogic/gdx/utils/reflect') {
		include '*.java'
		filter { String line ->
        	line.contains('com.badlogic.gdx.math') ? line.replace('com.badlogic.gdx.math', 'org.mini2Dx.gdx.utils.compat') : (
        		line.contains('com.badlogic.gdx.utils.reflect') ? line.replace('com.badlogic.gdx.utils.reflect', 'org.mini2Dx.gdx.utils.compat') : line
        	)
    	}
	}
	into 'src/main/java/org/mini2Dx/gdx/utils/compat'
}

task copyCollectionClasses(type: Copy, dependsOn: copyRequiredReflectClasses) {
	from('libgdx/gdx/src/com/badlogic/gdx/utils') {
		include 'Array.java'
		include 'ArrayMap.java'
		include 'AtomicQueue.java'
		include 'Bits.java'
		include 'BooleanArray.java'
		include 'ByteArray.java'
		include 'CharArray.java'
		include 'ComparableTimSort.java'
		include 'Collections.java'
		include 'DelayedRemovalArray.java'
		include 'Disposable.java'
		include 'FloatArray.java'
		include 'FlushablePool.java'
		include 'GdxRuntimeException.java'
		include 'IdentityMap.java'
		include 'IntArray.java'
		include 'IntFloatMap.java'
		include 'IntIntMap.java'
		include 'IntMap.java'
		include 'IntSet.java'
		include 'LongArray.java'
		include 'LongMap.java'
		include 'NumberUtils.java'
		include 'ObjectFloatMap.java'
		include 'ObjectIntMap.java'
		include 'ObjectMap.java'
		include 'ObjectSet.java'
		include 'OrderedMap.java'
		include 'OrderedSet.java'
		include 'Pool.java'
		include 'PooledLinkedList.java'
		include 'Pools.java'
		include 'Predicate.java'
		include 'Queue.java'
		include 'QuickSelect.java'
		include 'ReflectionPool.java'
		include 'Select.java'
		include 'ShortArray.java'
		include 'SnapshotArray.java'
		include 'Sort.java'
		include 'SortedIntList.java'
		include 'TimSort.java'
		include 'TimeUtils.java'
		
		filter { String line ->
        	line.contains('com.badlogic.gdx.math') ? line.replace('com.badlogic.gdx.math', 'org.mini2Dx.gdx.utils.compat') : (
        		line.contains('com.badlogic.gdx.utils.reflect') ? line.replace('com.badlogic.gdx.utils.reflect', 'org.mini2Dx.gdx.utils.compat') : (
					line.contains('com.badlogic.gdx.utils') ? line.replace('com.badlogic.gdx.utils', 'org.mini2Dx.gdx.utils') : line
				)
        	)
    	}
	}
	into 'src/main/java/org/mini2Dx/gdx/utils'
}

compileJava.dependsOn copyCollectionClasses

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if(project.hasProperty('ossrhUser')) {
	signing {
		sign configurations.archives
	}
	
	uploadArchives {
		repositories {
			mavenDeployer {
				// POM signature
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				// Target repository
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUser, password: ossrhPassword)
				}
				pom.project {
					name project.name
					description project.description
					packaging 'jar'
					url 'https://github.com/mini2Dx/gdx-collections'

					scm {
						connection 'scm:git:https://github.com/mini2Dx/gdx-collections.git'
						developerConnection 'scm:git:git@github.com:mini2Dx/gdx-collections.git'
						url 'https://github.com/mini2Dx/gdx-collections.git'
					}

					licenses {
						license {
							name 'Apache License, Version 2.0'
							url 'https://opensource.org/licenses/Apache-2.0'
							distribution 'repo'
						}
					}

					developers {
						developer {
							id = 'tomcashman'
							name = 'Thomas Cashman'
							email = 'thomascashman404@gmail.com'
						}
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}